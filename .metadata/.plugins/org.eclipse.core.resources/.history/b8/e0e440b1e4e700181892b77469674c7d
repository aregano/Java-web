package com.alvaro.database;

import java.util.ArrayList;

import com.alvaro.models.Usuario;
import com.alvaro.models.Habitacion;

public class BBDD {

	public ArrayList<Usuario> usuarios = new ArrayList<Usuario>();
	public ArrayList<Habitacion> habitaciones = new ArrayList<Habitacion>();
	
	public BBDD() {
		this.fillUsuarios();
		this.fillHabitaciones();
		
		this.relacionarUserHab();
	}
	
	private boolean fillUsuarios() {
		usuarios.add(new Usuario(1, "Pepe", "p@p.es", null));
		usuarios.add(new Usuario(2, "Pepa", "pa@p.es", null));
		usuarios.add(new Usuario(3, "Pepi", "pi@p.es", null));
	
		return true;
		
		
	}
	
	private boolean fillHabitaciones () {
		habitaciones.add(new Habitacion(1, "Marques 26", 256, "Madrid"));
		habitaciones.add(new Habitacion(2, "Provenzal 4", 25, "Madrid"));
		habitaciones.add(new Habitacion(3, "Roca 20", 56, "Madrid"));
		
		return true;
	}
	
	private boolean relacionarUserHab() {
		usuarios.get(0).setHabitacion(habitaciones.get(2));
		usuarios.get(1).setHabitacion(habitaciones.get(1));
		usuarios.get(2).setHabitacion(habitaciones.get(0));
		
		return true;
	}
	
//	Metodo que en funcion del id me devuelve un usuario concreto. 
//	Si no existe devuelve null. Una vez encontrado el usuario para de buscar (break)
	
	public Usuario getUsuarioById(int id) {
		Usuario usuarioADevolver = null;
		
		for (Usuario unUsuario : usuarios) {
			if (unUsuario.getId() == id) {
				usuarioADevolver = unUsuario;
				break; //acabas con las iteraciones
				}
			}		
		return usuarioADevolver;
	}
	
	public Usuario getHabitacionByHid(int hid) {
		Usuario habADevolver = null;
		
		for (Usuario unaHabitacion : habitaciones) {
			if (unaHabitacion.getHid() == hid) {
				habADevolver = unaHabitacion;
				break; //acabas con las iteraciones
				}
			}		
		return habADevolver;
	}
	
}
